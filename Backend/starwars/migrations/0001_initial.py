# Generated by Django 4.2.7 on 2025-08-27 00:11

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100, unique=True)),
                ('episode_id', models.IntegerField(unique=True)),
                ('opening_crawl', models.TextField()),
                ('director', models.CharField(max_length=100)),
                ('producer', models.CharField(max_length=200)),
                ('release_date', models.DateField()),
                ('swapi_url', models.URLField(blank=True, null=True, validators=[django.core.validators.URLValidator()])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('edited', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['episode_id'],
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('height', models.CharField(blank=True, max_length=10, null=True)),
                ('mass', models.CharField(blank=True, max_length=10, null=True)),
                ('hair_color', models.CharField(blank=True, max_length=50, null=True)),
                ('skin_color', models.CharField(blank=True, max_length=50, null=True)),
                ('eye_color', models.CharField(blank=True, max_length=50, null=True)),
                ('birth_year', models.CharField(blank=True, max_length=20, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('hermaphrodite', 'Hermaphrodite'), ('none', 'None'), ('n/a', 'N/A'), ('unknown', 'Unknown')], max_length=15, null=True)),
                ('swapi_url', models.URLField(blank=True, null=True, validators=[django.core.validators.URLValidator()])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('edited', models.DateTimeField(auto_now=True)),
                ('films', models.ManyToManyField(blank=True, related_name='characters', to='starwars.film')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Planet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('rotation_period', models.CharField(blank=True, max_length=20, null=True)),
                ('orbital_period', models.CharField(blank=True, max_length=20, null=True)),
                ('diameter', models.CharField(blank=True, max_length=20, null=True)),
                ('climate', models.CharField(blank=True, max_length=100, null=True)),
                ('gravity', models.CharField(blank=True, max_length=50, null=True)),
                ('terrain', models.CharField(blank=True, max_length=100, null=True)),
                ('surface_water', models.CharField(blank=True, max_length=20, null=True)),
                ('population', models.CharField(blank=True, max_length=50, null=True)),
                ('swapi_url', models.URLField(blank=True, null=True, validators=[django.core.validators.URLValidator()])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('edited', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('classification', models.CharField(blank=True, max_length=100, null=True)),
                ('designation', models.CharField(blank=True, max_length=100, null=True)),
                ('average_height', models.CharField(blank=True, max_length=20, null=True)),
                ('skin_colors', models.CharField(blank=True, max_length=200, null=True)),
                ('hair_colors', models.CharField(blank=True, max_length=200, null=True)),
                ('eye_colors', models.CharField(blank=True, max_length=200, null=True)),
                ('average_lifespan', models.CharField(blank=True, max_length=20, null=True)),
                ('language', models.CharField(blank=True, max_length=100, null=True)),
                ('swapi_url', models.URLField(blank=True, null=True, validators=[django.core.validators.URLValidator()])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('edited', models.DateTimeField(auto_now=True)),
                ('films', models.ManyToManyField(blank=True, related_name='species', to='starwars.film')),
                ('homeworld', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='starwars.planet')),
                ('people', models.ManyToManyField(blank=True, related_name='species', to='starwars.person')),
            ],
            options={
                'verbose_name_plural': 'Species',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='person',
            name='homeworld',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='residents', to='starwars.planet'),
        ),
        migrations.AddField(
            model_name='film',
            name='planets',
            field=models.ManyToManyField(blank=True, related_name='films', to='starwars.planet'),
        ),
    ]
